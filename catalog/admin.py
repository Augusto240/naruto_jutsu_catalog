# catalog/admin.py
from django.contrib import admin
from .models import Jutsu

# VERS√ÉO B√ÅSICA (funciona, mas √© simples)
# admin.site.register(Jutsu)

# VERS√ÉO AVAN√áADA (muito mais poderosa)
@admin.register(Jutsu)
class JutsuAdmin(admin.ModelAdmin):
    """
    Configura√ß√£o personalizada para o modelo Jutsu no admin.
    
    Pense nisso como criar uma interface especializada para
    os arquivistas ninja gerenciarem o cat√°logo de jutsus.
    """
    
    # Campos mostrados na lista principal
    list_display = [
        'name',                    # Nome do jutsu
        'element_type',           # Elemento (mas vai mostrar o c√≥digo)
        'get_element_display',    # Elemento (vers√£o leg√≠vel)
        'jutsu_type',
        'rank', 
        'created_at'
    ]
    
    # Filtros na barra lateral - super √∫teis para navegar
    list_filter = [
        'element_type',           # Filtro por elemento
        'jutsu_type',            # Filtro por tipo  
        'rank',                  # Filtro por rank
        'created_at',            # Filtro por data de cria√ß√£o
    ]
    
    # Campos pesquis√°veis - cria uma caixa de busca
    search_fields = [
        'name',                  # Buscar por nome
        'description',           # Buscar na descri√ß√£o
    ]
    
    # Ordena√ß√£o padr√£o
    ordering = ['name']
    
    # Campos somente leitura - usu√°rios podem ver mas n√£o editar
    readonly_fields = ['created_at', 'updated_at']
    
    # Organiza√ß√£o dos campos no formul√°rio de edi√ß√£o
    fieldsets = (
        ('Informa√ß√µes B√°sicas', {
            'fields': ('name', 'description')
        }),
        ('Classifica√ß√£o', {
            'fields': ('element_type', 'jutsu_type', 'rank'),
            'classes': ('wide',),  # Layout mais largo
        }),
        ('Metadados', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',),  # Se√ß√£o colaps√°vel
        }),
    )
    
    # Quantos itens mostrar por p√°gina
    list_per_page = 25
    
    # M√©todo personalizado para mostrar elemento de forma mais bonita
    def get_element_display(self, obj):
        """Retorna o elemento com emoji visual."""
        element_emojis = {
            'fire': 'üî•',
            'water': 'üåä', 
            'wind': 'üí®',
            'earth': 'üóø',
            'lightning': '‚ö°',
            'illusion': 'üëÅÔ∏è',
            'yin': '‚òØÔ∏è',
            'yang': '‚òØÔ∏è', 
            'yin-yang': '‚òØÔ∏è',
            'other': '‚ùì'
        }
        emoji = element_emojis.get(obj.element_type, '‚ùì')
        return f"{emoji} {obj.get_element_type_display()}"
    
    # Nome da coluna no admin
    get_element_display.short_description = 'Elemento'